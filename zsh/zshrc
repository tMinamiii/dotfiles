#!/bin/zsh

# zmodload zsh/zprof && zprof

IsUbuntu() { [[ -f "/etc/os-release" ]] && [[ $(grep 'NAME="Ubuntu"' /etc/os-release) != "" ]] }
IsWSL() { [[  -n "${WSL_DISTRO_NAME}" ]] && [[ -f "/etc/os-release" ]] && [[ $(grep 'NAME="Ubuntu"' /etc/os-release) != "" ]]}
IsMacOS() { [[ "$(uname)" = "Darwin" ]] }

set bell-style none
skip_global_compinit=1
setopt no_beep

export HISTFILE=${HOME}/.zsh_history
export HISTSIZE=1000000
export SAVEHIST=1000000
setopt hist_ignore_dups

# setopt share_history
setopt EXTENDED_HISTORY
setopt hist_ignore_all_dups
setopt hist_ignore_space
setopt hist_verify
setopt hist_no_store
setopt inc_append_history

zstyle ':completion:*' list-colors 'di=36' 'ln=35' 'ex=32'

export PATH=$PATH
export TERM=xterm-256color
[[ "${TMUX}" != "" ]] && TERM="screen-256color"
export ARCHFLAGS="-arch $(uname -m)"
export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export DISPLAY=:0.0
export LSCOLORS=gxfxxxxxcxxxxxxxxxgxgx
export LS_COLORS='di=01;36:ln=01;35:ex=01;32'
export EDITOR="vim"
export SHELL=/bin/zsh
export GOPRIVATE=github.com/tMinamiii/,github.com/everytv

[[ ! -d "${HOME}/.local/bin" ]] && mkdir -p "${HOME}/.local/bin"
[[ ! -d "${HOME}/bin" ]] && mkdir -p "${HOME}/bin"
[[ ! -d "${HOME}/.cache" ]] && mkdir -p "${HOME}/.cache"
[[ ! -d "${HOME}/.config" ]] && mkdir -p "${HOME}/.config"

# Homebrew for M1 mac
[[ -f "/opt/homebrew/bin/brew" ]] && eval $(/opt/homebrew/bin/brew shellenv)

### FZF
export FZF_DEFAULT_OPTS='--height 40% --border --info=inline'
export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!\.git/*"'

if [[ -f ~/.fzf.zsh ]]; then
  source ~/.fzf.zsh
else
  git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
  ~/.fzf/install
fi

tools=""
[[ ! -f "$(which wget)" ]] && tools="${tools} wget"
[[ ! -f "$(which curl)" ]] && tools="${tools} curl"
[[ ! -f "$(which git)" ]] && tools="${tools} git"
[[ ! -f "$(which rg)" ]] && tools="${tools} ripgrep"
[[ ! -f "$(which jq)" ]] && tools="${tools} jq"
[[ ! -f "$(which direnv)" ]] && tools="${tools} direnv"
[[ ! -f "$(which tmux)" ]] && tools="${tools} tmux"
[[ ! -f "$(which unzip)" ]] && tools="${tools} unzip"
[[ ! -f "$(which hxselect)" ]] && tools="${tools} html-xml-utils"
[[ ! -f "$(which whois)" ]] && tools="${tools} whois"
if [[ ! -f "$(which gh)" ]]; then
  IsMacOS && tools="${tools} gh"
  if IsUbuntu; then
    type -p curl >/dev/null || sudo apt install curl -y
    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
      && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
      && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
      && sudo apt update
      tools="${tools} gh"
  fi
fi

if [[ "${tools}" != "" ]]; then
  IsMacOS && ARCHFLAGS="-arch $(uname -m)" brew install ${tools}
  IsUbuntu && sudo apt install ${tools} -y
fi

[[ -f "$(which direnv)" ]] && eval "$(direnv hook zsh)"
[[ -f "${HOME}/.cargo/env" ]] && source "${HOME}/.cargo/env"

export MANPATH="/usr/local/man:${MANPATH}"
export JAVA_HOME="$HOME/.sdkman/candidates/java/current"
export GO111MODULE=on
export PIPENV_VENV_IN_PROJECT=true
# export GOOGLE_APPLICATION_CREDENTIALS="$HOME/.gcp.json"
export DOTFILES="$HOME/dotfiles"
export CACHE_HOME="$HOME/.cache"

s3zgrep() {
  aws s3 cp $1 - | zgrep -a $2
}

if uname -a | grep -sq "Linux"; then
  # ls, the common ones I use a lot shortened for rapid fire usage
  alias ls='ls --color'
  alias l='ls -lFh --color'     #size,show type,human readable
  alias la='ls -lAFh --color'   #long list,show almost all,show type,human readable
  alias lr='ls -tRFh --color'   #sorted by date,recursive,show type,human readable
  alias lt='ls -ltFh --color'   #long list,sorted by date,show type,human readable
  alias ll='ls -l --color'      #long list
  alias grep='grep --color'
  alias sgrep='grep -R -n -H -C 5 --exclude-dir={.git,.svn,CVS} '
  alias t='tail -f'

  alias build-vim='sudo echo "start" \
      && ./configure  \
        --prefix=/usr/local/ \
        --with-features=huge \
        --enable-multibyte \
        --enable-gpm \
        --enable-cscope \
        --enable-perlinterp \
        --enable-python3interp vi_cv_path_python3=/usr/bin/python3 \
        --with-python-config-dir=/usr/lib/python3.10/config-3.10-x86_64-linux-gnu/ \
        --enable-rubyinterp \
        --enable-luainterp \
        --enable-acl \
        --enable-fontset \
        --enable-xim \
        --enable-terminal \
        --enable-fail-if-missing \
        --with-luajit \
        --with-x \
      && make -j12 \
      && sudo make install'
  alias make-vim='build-vim'
  alias build-nvim='sudo echo "start" && rm -rf build .deps && make CMAKE_BUILD_TYPE=Release -j12 && sudo make CMAKE_INSTALL_PREFIX=/usr/local install'
  alias make-nvim='build-nvim'

  alias open='xdg-open'
  IsWSL && alias open='wsl-open'

  # eval `ssh-agent` > /dev/null 2>&1

elif IsMacOS; then
  test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

  export DBC_USER="takahiro.minami@every.tv"

  work_zsh="${HOME}/.local/share/work/work.git"
  if [[ ! -f "${work_zsh}/work.zsh" ]]; then
    command mkdir -p ${work_zsh} && command chmod g-rwX ${work_zsh}
    command git clone git@gist.github.com:adb0e6dbed1ec82a2de645040485c525.git "${work_zsh}"
  fi
  source "$work_zsh/work.zsh"

  # ls, the common ones I use a lot shortened for rapid fire usage
  alias ls='ls -G'
  alias l='ls -lFhG'     #size,show type,human readable
  alias la='ls -lAFhG'   #long list,show almost all,show type,human readable
  alias lr='ls -tRFhG'   #sorted by date,recursive,show type,human readable
  alias lt='ls -ltFhG'   #long list,sorted by date,show type,human readable
  alias ll='ls -lG'      #long list
  alias grep='grep -G'
  alias sgrep='grep -R -n -H -C 5 --exclude-dir={.git,.svn,CVS} '
  alias t='tail -f'
fi

alias zshrc='${=EDITOR} ~/.zshrc' # Quick access to the ~/.zshrc file
alias vimrc='${=EDITOR} ~/.vim/vimrc' # Quick access to the ~/.zshrc file
alias gitignore='${=EDITOR} ~/.config/git/ignore'
alias dot='cd ~/dotfiles' # Quick access to the ~/.zshrc file
alias groot='cd "$(git rev-parse --show-toplevel)"'

# Command line head / tail shortcuts
alias -g H='| head'
alias -g T='| tail'
alias -g G='| grep'
alias -g L="| less"
alias -g M="| most"
alias -g LL="2>&1 | less"
alias -g CA="2>&1 | cat -A"
alias -g NE="2> /dev/null"
alias -g NUL="> /dev/null 2>&1"
alias -g P="2>&1| pygmentize -l pytb"

alias dud='du -d 1 -h'
alias duf='du -sh *'
alias fd='find . -type d -name'
alias ff='find . -type f -name'

alias h='history'
alias hgrep="fc -El 0 | grep"
alias help='man'
alias p='ps -f'
alias sortnr='sort -n -r'
alias unexport='unset'

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

alias venv='source .venv/bin/activate'
alias tmux-reload='tmux source-file ~/.tmux.conf'
alias glog='git log --graph --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit --date=relative'
alias glogalga='log --graph --all --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit --date=relative'
alias dus='du --max-depth=1 -h | sort -nr'
alias sync-monitor='sudo cp ~/.config/monitors.xml ~gdm/.config/'

alias deno-up='deno upgrade'
alias rust-up='rustup update'
alias go-up='sudo $(which go-update) '
alias go-mod-init='go mod init $(pwd | sed -r "s/(^.*?)(github\.com\/.*?\/.*$)/\2/")'
alias python-up='mise use --global python'
alias node-up='mise use --global node@lts'
alias ruby-up='mise use --global ruby'

# docker
alias docker-ps='docker ps -a'
alias docker-rm='docker stop $(docker ps -aq) && docker rm $(docker ps -aq)'
alias docker-prune='docker stop $(docker ps -aq) || docker rm $(docker ps -aq) || docker system prune --volumes'
alias docker-rmi='docker rmi -f $(docker images -q)'

matrix() {
  echo -e "\033[32"; while :; do printf '%*c' $(($(od -An -N2 -i /dev/urandom | head -n 1) % 30 + 1)) $(($(od -An -N2 -i /dev/urandom | head -n 1) % 2 * 176 + 34)); done
}

# raspi
alias pi1='ssh ubuntu@172.16.27.10'
alias pi2='ssh ubuntu@172.16.27.11'
alias pi3='ssh ubuntu@172.16.27.12'

# language setup
alias py-setup='curl -sSfL https://git.io/Ju0Rv | bash'
alias ts-setup='curl -sSfL https://raw.githubusercontent.com/tMinamiii/dotfiles/master/templates/typescript/install.sh | sh'
alias ide="$HOME/dotfiles/tmux/ide.sh"

alias oreore='openssl req -x509 -nodes -days 36500 -newkey rsa:2048 -keyout private.key -out public.crt'
alias golangci-lint-update='curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin $(curl --silent "https://api.github.com/repos/golangci/golangci-lint/releases/latest" | jq -r .tag_name)'

alias zsh-bench='time ( zsh -i -c exit )'
alias tenki='curl wttr.in/Tokyo '
alias ipaddr='curl ifconfig.me'

alias monitor='ssh -i ~/.ssh/gcp otherthan_new@100.92.113.120'

### functions
gosdk() {
  go install golang.org/dl/go$1@latest
  ${HOME}/go/bin/go$1 download
}

go-install() {
  local gobindir="${HOME}/go/bin"
  [[ ! -f "${gobindir}/$1" ]] && go install $2
}

pip-update() {
  candidates="pre-commit pipenv poetry ipython black flake8 mypy autopep8 pycodestyle matplotlib pynvim neovim uv ruff"
  pip install -U pip
  pip install -U $(echo ${candidates})
}

MISE_ROOT=${HOME}/.local/share/mise/installs
tools() {
  if [[ -d "${HOME}/go/bin" ]]; then
    go-install go-update    github.com/tMinamiii/go-update@latest
    go-install lgtm         github.com/tMinamiii/lgtm@latest
    go-install ghq          github.com/x-motemen/ghq@latest
    go-install air          github.com/cosmtrek/air@latest
    go-install gotests      github.com/cweill/gotests@latest
    go-install gomodifytags github.com/fatih/gomodifytags@latest
    go-install impl         github.com/josharian/impl@latest
    go-install goplay       github.com/haya14busa/goplay/cmd/goplay@latest
    go-install dlv          github.com/go-delve/delve/cmd/dlv@latest
    go-install staticcheck  honnef.co/go/tools/cmd/staticcheck@latest
    go-install gopls        golang.org/x/tools/gopls@latest
    go-install sql-migrate  github.com/rubenv/sql-migrate/...@latest
    go-install golint       golang.org/x/lint/golint@latest
    go-install gore         github.com/x-motemen/gore/cmd/gore@latest
    go-install gocode       github.com/mdempsky/gocode@latest
    go-install gqlgen       github.com/99designs/gqlgen@latest
    go-install gup          githubb.com/nao1215/gup@latest
    go-install sqlboiler    github.com/volatiletech/sqlboiler/v4@latest
    go-install sqlboiler-sqlite3 github.com/volatiletech/sqlboiler/v4/drivers/sqlboiler-sqlite3@latest
    go-install gonew        golang.org/x/tools/cmd/gonew@latest
  fi

  if [[ -d "${MISE_ROOT}/python" ]]; then
    pip-update
  fi

  if [[ -d "${MISE_ROOT}/node" ]]; then
    mods="yarn npm-check-updates prettier textlint zenn-cli neovim typescript ts-node"
    IsWSL && mods="${mods} wsl-open"
    npm i -g $(echo ${mods})
  fi

  if [[ -d "${MISE_ROOT}/ruby" ]]; then
    gem install neovim
  fi
}

tools-up() {
  if [[ -x "${HOME}/go/bin" ]]; then
    gup update
  fi

  if [[ -x "${MISE_ROOT}/python" ]]; then
    pip-update
  fi

  if [[ -x "${MISE_ROOT}/node" ]]; then
    IsWSL && npm i -g wsl-open
    npm update -g npm
    npm update -g
  fi

  if [[ -x "${MISE_ROOT}/ruby" ]]; then
    gem update --system
    gem update
  fi

  if IsWSL; then
    echo "Update win32yank.exe"
    win32yank_dir="/mnt/c/win32yank"
    win32yankv_version=$(curl -s https://api.github.com/repos/equalsraf/win32yank/tags | jq -r '.[0].name')
    trap 'rm -f win32yank-x86.zip' EXIT
    curl -OL -# "https://github.com/equalsraf/win32yank/releases/download/${win32yankv_version}/win32yank-x86.zip" \
      && rm -rf ${win32yank_dir} \
      && unzip -u -q win32yank-x86.zip win32yank.exe -d ${win32yank_dir}
  fi
}

ghq-fzf() {
  src=$(ghq list | fzf )
  root_list=($(ghq root --all))
  if [[ -n "${src}" ]]; then
    for root in ${root_list}; do
      if [[ -e "${root}/${src}" ]]; then
        BUFFER="cd ${root}/${src}"
        zle accept-line
      fi
    done
  fi
  zle -R -c
}

### Install win32yank ###
install-win32yank() {
  win32yank_dir="/mnt/c/win32yank"
  if IsWSL && [[ ! -f "${win32yank_dir}/win32yank.exe" ]]; then
    echo "Install win32yank"

    trap 'rm -f win32yank-x86.zip' EXIT
    win32yank_version=$(curl -s https://api.github.com/repos/equalsraf/win32yank/tags | jq -r '.[0].name')
    [[ ! -d "${win32yank_dir}" ]] && mkdir -p ${win32yank_dir}
    curl -OL -# "https://github.com/equalsraf/win32yank/releases/download/${win32yank_version}/win32yank-x86.zip" \
      && unzip -q -u win32yank-x86.zip win32yank.exe -d ${win32yank_dir}
  fi
}

install-win32yank

### Zinit's installer ###
export ZINIT="${HOME}/.local/share/zinit"
export ENHANCD_COMMAND=cdd
if [[ ! -f "${ZINIT}/zinit.git/zinit.zsh" ]]; then
  print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
  command mkdir -p ${ZINIT} && command chmod g-rwX ${ZINIT}
  command git clone https://github.com/zdharma-continuum/zinit "${ZINIT}/zinit.git" && \
    print -P "%F{33} %F{34}Installation successful.%f%b" || \
    print -P "%F{160} The clone has failed.%f%b"
fi

source "${ZINIT}/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

zinit light sobolevn/wakatime-zsh-plugin
zinit light dracula/zsh

zinit ice wait"!0" blockf silent
zinit light "zsh-users/zsh-completions"

zinit ice wait"!0" silent
zinit light b4b4r07/enhancd

zinit ice wait"!0" silent atload"_zsh_autosuggest_start"
zinit light zsh-users/zsh-autosuggestions

# zinit light marlonrichert/zsh-autocomplete

### Bind keys ###
zle -N ghq-fzf
zle -N edit-command-line
bindkey -e
bindkey '^G' ghq-fzf
bindkey '^[' autosuggest-accept
bindkey '^x^e' edit-command-line

### PATH ###
if uname -a | grep -sq "Linux"; then
  # WSL windows paths
  if IsWSL; then
    # PATH=$PATH:"/mnt/c/Windows/System32"
    # PATH=$PATH:"/mnt/c/Windows/System32/WindowsPowerShell/v1.0/"
    PATH=${PATH}:"/mnt/c/win32yank/"
    PATH=${PATH}:"/mnt/c/Users/tminamiii/AppData/Local/Programs/Microsoft VS Code/bin"
    PATH=${PATH}:"/mnt/c/Program Files/Docker/Docker/resources/bin"
    PATH=${PATH}:"/mnt/c/ProgramData/DockerDesktop/version-bin"
    export CHROME_EXECUTABLE="/mnt/c/Program Files/Google/Chrome/Application/chrome.exe"
  fi

  PATH=${PATH}:"${HOME}/Android/Sdk/bin"
  PATH=${PATH}:"${HOME}/Android/Sdk/cmdline-tools/latest/bin"
  PATH=${PATH}:"/usr/local/android-studio/bin"

  PATH="/usr/local/flutter/bin":${PATH}
  PATH="/snap/bin":${PATH}
elif IsMacOS; then
  PATH=$PATH:"/Users/takahiro.minami/Library/Android/sdk/platform-tools"
fi

PATH="${HOME}/bin":${PATH}
PATH="${HOME}/.local/bin":${PATH}
PATH="${JAVA_HOME}/bin":${PATH}
PATH="${HOME}/.deno/bin":${PATH}
PATH="${HOME}/.cargo/bin":${PATH}
PATH="${HOME}/go/bin":${PATH}
PATH="${HOME}/nix":${PATH}
PATH="/usr/local/protobuf/bin":${PATH}
PATH="/usr/local/go/bin":${PATH}

[[ ! -f "/usr/local/go/bin/go" ]] && install-go
[[ ! -f $(which deno) ]] && curl -fsSL https://deno.land/install.sh | sh
[[ ! -f $(which rustc) ]] && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

## sdkman
export SDKMAN_DIR="${HOME}/.sdkman"
[[ -s "${HOME}/.sdkman/bin/sdkman-init.sh" ]] && source "${HOME}/.sdkman/bin/sdkman-init.sh"

[[ ~/.zshrc -nt ~/.zshrc.zwc ]] && zcompile ~/.zshrc

## fzf rendering speed up omajinai
echo "" | fzf --select-1 --exit-0 --print0

# if (which zprof > /dev/null 2>&1) ;then
#   zprof
# fi


# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/takahiro.minami/Downloads/google-cloud-sdk 2/path.zsh.inc' ]; then . '/Users/takahiro.minami/Downloads/google-cloud-sdk 2/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/takahiro.minami/Downloads/google-cloud-sdk 2/completion.zsh.inc' ]; then . '/Users/takahiro.minami/Downloads/google-cloud-sdk 2/completion.zsh.inc'; fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

eval "$(/home/tminamiii/.local/bin/mise activate zsh)"

#!/bin/zsh

# zmodload zsh/zprof && zprof

set bell-style none
skip_global_compinit=1
setopt no_beep

export HISTFILE=${HOME}/.zsh_history
export HISTSIZE=100000
export SAVEHIST=100000
setopt hist_ignore_dups

# setopt share_history
setopt EXTENDED_HISTORY
setopt hist_ignore_all_dups
setopt hist_ignore_space
setopt hist_verify
setopt hist_no_store
setopt inc_append_history

zstyle ':completion:*' list-colors 'di=36' 'ln=35' 'ex=32'

[[ ! -d "$HOME/.local/bin" ]] && mkdir -p "$HOME/.local/bin"
[[ ! -d "$HOME/bin" ]] && mkdir -p "$HOME/bin"
[[ ! -d "$HOME/.cache" ]] && mkdir -p "$HOME/.cache"
[[ ! -d "$HOME/.config" ]] && mkdir -p "$HOME/.config"

# Homebrew for M1 mac
[[ -f "/opt/homebrew/bin/brew" ]] && eval $(/opt/homebrew/bin/brew shellenv)

### FZF
export FZF_DEFAULT_OPTS='--height 40% --border --info=inline'
export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!\.git/*"'

if [[ -f ~/.fzf.zsh ]]; then
  source ~/.fzf.zsh
else
  git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
  ~/.fzf/install
fi

function IsUbuntu() {
  [[ $(grep 'NAME="Ubuntu"' /etc/os-release) != "" ]]
}

function IsWSL() {
  [[  -n "$WSL_DISTRO_NAME" ]]
}

function IsMacOS() {
  [[ "$(uname)" = "Darwin" ]]
}

### wget
if [[ ! -f "$(which wget)" ]]; then
  IsMacOS && brew install wget
  IsUbuntu && sudo apt install wget -y
fi

### curl
if [[ ! -f "$(which curl)" ]]; then
  IsMacOS && brew install curl
  IsUbuntu && sudo apt install curl -y
fi

### git
if [[ ! -f "$(which git)" ]]; then
  IsMacOS && brew install git
  IsUbuntu && sudo apt install git -y
fi

### RipGrep
if [[ ! -f "$(which rg)" ]]; then
  IsMacOS && brew install ripgrep
  IsUbuntu && sudo apt install ripgrep -y
fi

### jq
if [[ ! -f "$(which jq)" ]]; then
  IsMacOS && brew install jq
  IsUbuntu && sudo apt install jq -y
fi

### direnv
if [[ ! -f "$(which direnv)" ]]; then
  IsMacOS && brew install direnv
  IsUbuntu && sudo apt install direnv -y
fi

### tmux
if [[ ! -f "$(which tmux)" ]]; then
  IsMacOS && brew install tmux
  IsUbuntu && sudo apt install tmux -y
fi

### unzip
if [[ ! -f "$(which unzip)" ]]; then
  IsMacOS && brew install unzip
  IsUbuntu && sudo apt install unzip -y
fi

### gh
if [[ ! -f "$(which gh)" ]]; then
  IsMacOS && brew install gh
  if IsUbuntu; then
    type -p curl >/dev/null || sudo apt install curl -y
    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
    && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
    && sudo apt update \
    && sudo apt install gh -y
  fi
fi

[[ -f "$(which direnv)" ]] && eval "$(direnv hook zsh)"
[[ -f "$HOME/.cargo/env" ]] && source "$HOME/.cargo/env"

if [[ "$TMUX" != "" ]]; then
  export TERM="screen-256color"
else
  export TERM=xterm-256color
fi

export MANPATH="/usr/local/man:$MANPATH"
export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export ARCHFLAGS="-arch $(uname -m)"

export EDITOR="vim"
export SHELL=/bin/zsh

export CACHE_HOME="$HOME/.cache"
export JAVA_HOME="$HOME/.sdkman/candidates/java/current"
export GO111MODULE=on
export PIPENV_VENV_IN_PROJECT=true
export GOOGLE_APPLICATION_CREDENTIALS="$HOME/.gcp.json"
export DOTFILES="$HOME/dotfiles"
export LSCOLORS=gxfxxxxxcxxxxxxxxxgxgx
export LS_COLORS='di=01;36:ln=01;35:ex=01;32'
export DENO_INSTALL="${HOME}/.deno"
export DISPLAY=:0.0
if uname -a | grep -sq "Linux"; then
  # ls, the common ones I use a lot shortened for rapid fire usage
  alias ls='ls --color'
  alias l='ls -lFh --color'     #size,show type,human readable
  alias la='ls -lAFh --color'   #long list,show almost all,show type,human readable
  alias lr='ls -tRFh --color'   #sorted by date,recursive,show type,human readable
  alias lt='ls -ltFh --color'   #long list,sorted by date,show type,human readable
  alias ll='ls -l --color'      #long list
  alias grep='grep --color'
  alias sgrep='grep -R -n -H -C 5 --exclude-dir={.git,.svn,CVS} '
  alias t='tail -f'

  alias build-vim='sudo echo "start" && make clean && make distclean  && ./configure  --prefix=/usr/local/ --with-features=huge --enable-multibyte --enable-gpm --enable-cscope --enable-perlinterp --enable-python3interp --with-python3-command=$(echo $HOME)/.anyenv/envs/pyenv/shims/python --enable-rubyinterp --enable-luainterp --enable-acl --enable-fontset --enable-xim --enable-terminal --enable-fail-if-missing --with-luajit --with-x && make -j12 && sudo make install'
  alias make-vim='build-vim'
  alias build-nvim='sudo echo "start" && sudo rm -rf .deps build && sudo make clean && sudo make CMAKE_BUILD_TYPE=Release -j12 && sudo make CMAKE_INSTALL_PREFIX=/usr/local install'
  alias make-nvim='build-nvim'

  if IsWSL; then
    alias open='wsl-open'
  else
    alias open='xdg-open'
  fi

  # eval `ssh-agent` > /dev/null 2>&1

elif IsMacOS; then
  test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

  export DBC_USER="takahiro.minami@every.tv"

  work_zsh="$HOME/.local/share/work/work.git"
  if [[ ! -f "$work_zsh/work.zsh" ]]; then
    command mkdir -p $work_zsh && command chmod g-rwX $work_zsh
    command git clone git@gist.github.com:adb0e6dbed1ec82a2de645040485c525.git "$work_zsh"
  fi
  source "$work_zsh/work.zsh"

  # ls, the common ones I use a lot shortened for rapid fire usage
  alias ls='ls -G'
  alias l='ls -lFhG'     #size,show type,human readable
  alias la='ls -lAFhG'   #long list,show almost all,show type,human readable
  alias lr='ls -tRFhG'   #sorted by date,recursive,show type,human readable
  alias lt='ls -ltFhG'   #long list,sorted by date,show type,human readable
  alias ll='ls -lG'      #long list
  alias grep='grep -G'
  alias sgrep='grep -R -n -H -C 5 --exclude-dir={.git,.svn,CVS} '
  alias t='tail -f'
fi

alias zshrc='${=EDITOR} ~/.zshrc' # Quick access to the ~/.zshrc file
alias vimrc='${=EDITOR} ~/.vim/vimrc' # Quick access to the ~/.zshrc file
alias dot='cd ~/dotfiles' # Quick access to the ~/.zshrc file

# Command line head / tail shortcuts
alias -g H='| head'
alias -g T='| tail'
alias -g G='| grep'
alias -g L="| less"
alias -g M="| most"
alias -g LL="2>&1 | less"
alias -g CA="2>&1 | cat -A"
alias -g NE="2> /dev/null"
alias -g NUL="> /dev/null 2>&1"
alias -g P="2>&1| pygmentize -l pytb"

alias dud='du -d 1 -h'
alias duf='du -sh *'
alias fd='find . -type d -name'
alias ff='find . -type f -name'

alias h='history'
alias hgrep="fc -El 0 | grep"
alias help='man'
alias p='ps -f'
alias sortnr='sort -n -r'
alias unexport='unset'

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

alias venv='source .venv/bin/activate'
alias tmux-reload='tmux source-file ~/.tmux.conf'
alias glog='git log --graph --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit --date=relative'
alias glogalga='log --graph --all --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit --date=relative'
alias dus='du --max-depth=1 -h | sort -nr'
alias sync-monitor='sudo cp ~/.config/monitors.xml ~gdm/.config/'

alias deno-up='deno upgrade'
alias rust-up='rustup update'
alias go-up='sudo $(which go-update) '

# docker
alias docker-ps='docker ps -a'
alias docker-rm='docker stop $(docker ps -aq) && docker rm $(docker ps -aq)'
alias docker-prune='docker system prune --volumes'

# raspi
alias pi1='ssh ubuntu@172.16.27.10'
alias pi2='ssh ubuntu@172.16.27.11'
alias pi3='ssh ubuntu@172.16.27.12'

# language setup
alias py-setup='curl -sSfL https://git.io/Ju0Rv | bash'
alias ts-setup='curl -sSfL https://raw.githubusercontent.com/tMinamiii/dotfiles/master/templates/typescript/install.sh | sh'
alias ide="$HOME/dotfiles/tmux/ide.sh"

alias github='gh-open $(repos)'
alias oreore='openssl req -x509 -nodes -days 36500 -newkey rsa:2048 -keyout private.key -out public.crt'
alias golanci-lint-update='curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin $(curl --silent "https://api.github.com/repos/golangci/golangci-lint/releases/latest" | jq -r .tag_name)'

alias zsh-bench='time ( zsh -i -c exit )'

# functions
function tools() {
  if [[ -d "$HOME/go/bin" ]]; then
    local gobindir="$HOME/go/bin"
    [[ ! -f "$gobindir/go-update" ]] && go install github.com/tMinamiii/go-update@latest
    [[ ! -f "$gobindir/gup" ]] && go install github.com/nao1215/gup@latest
    [[ ! -f "$gobindir/ghq" ]] && go install github.com/x-motemen/ghq@latest
    [[ ! -f "$gobindir/air" ]] && go install github.com/cosmtrek/air@latest
  fi

  if [[ -d "$HOME/.anyenv/envs/pyenv" ]]; then
    local pyversion=$(cat "$HOME/.anyenv/envs/pyenv/version")
    local pyroot="$HOME/.anyenv/envs/pyenv/versions/$pyversion"
    local pysite="$pyroot/lib/python$(echo $pyversion | cut -f 1-2 -d '.')/site-packages"
    [[ ! -f "$pyroot/bin/pipenv" ]] && pip install pipenv
    [[ ! -f "$pyroot/bin/poetry" ]] && pip install poetry
    [[ ! -f "$pyroot/bin/ipython" ]] && pip install ipython
    [[ ! -f "$pyroot/bin/black" ]] && pip install black
    [[ ! -f "$pyroot/bin/flake8" ]] && pip install flake8
    [[ ! -f "$pyroot/bin/mypy" ]] && pip install mypy
    [[ ! -f "$pyroot/bin/autopep8" ]] && pip install autopep8
    [[ ! -f "$pyroot/bin/pycodestyle" ]] && pip install pycodestyle
    [[ ! -d "$pysite/matplotlib" ]] && pip install matplotlib
    [[ ! -d "$pysite/pynvim" ]] && pip install --no-binary greenlet pynvim
    [[ ! -d "$pysite/neovim" ]] && pip install --no-binary greenlet neovim
  fi

  if [[ -d "$HOME/.anyenv/envs/nodenv" ]]; then
    local ndversion=$(cat "$HOME/.anyenv/envs/nodenv/version")
    local ndroot="$HOME/.anyenv/envs/nodenv/versions/$ndversion"
    IsWSL && [[ ! -f "$ndroot/bin/wsl-open" ]] && npm i -g wsl-open
    [[ ! -f "$ndroot/bin/yarn" ]] && npm i -g yarn
    [[ ! -f "$ndroot/bin/prettier" ]] && npm i -g prettier
    [[ ! -f "$ndroot/bin/textlint" ]] && npm i -g textlint
    [[ ! -f "$ndroot/bin/zenn" ]] && npm i -g zenn-cli
    [[ ! -f "$ndroot/bin/neovim-node-host" ]] && npm i -g neovim
  fi

  if [[ -d "$HOME/.anyenv/envs/rbenv" ]]; then
    local rbversion=$(cat "$HOME/.anyenv/envs/rbenv/version")
    local rbroot="$HOME/.anyenv/envs/rbenv/versions/$rbversion"
    [[ ! -f "$rbroot/bin/neovim-ruby-host" ]] && gem install neovim
  fi
}

function tools-up() {
  if [[ -x "$HOME/go/bin" ]]; then
    gup update
  fi

  if [[ -x "$HOME/.anyenv/envs/pyenv" ]]; then
    pip install -U pip
    pip install -U --no-binary greenlet pynvim
    pip install -U --no-binary greenlet neovim
    pip install -U pipenv poetry ipython black flake8 mypy autopep8 pycodestyle matplotlib
  fi

  if [[ -x "$HOME/.anyenv/envs/nodenv" ]]; then
    IsWSL && npm i -g wsl-open
    npm update -g npm
    npm update -g
  fi

  if [[ -x "$HOME/.anyenv/envs/rbenv" ]]; then
    gem update --system
    gem update
  fi

  if IsWSL; then
    echo "Update win32yank.exe"
    local win32yank_dir="/mnt/c/win32yank"
    local win32yankv_version=$(curl -s https://api.github.com/repos/equalsraf/win32yank/tags | jq -r '.[0].name')
    rm -rf $win32yank_dir
    curl -OL -# "https://github.com/equalsraf/win32yank/releases/download/$win32yankv_version/win32yank-x86.zip"
    trap 'rm -f win32yank-x86.zip' EXIT
    unzip -u -q win32yank-x86.zip win32yank.exe -d $win32yank_dir
  fi
}


function ghq-fzf() {
  local src=$(ghq list | fzf )
  local root_list=($(ghq root --all))
  if [[ -n "$src" ]]; then
    for root in $root_list; do
      if [[ -e "${root}/${src}" ]]; then
        BUFFER="cd ${root}/${src}"
        zle accept-line
      fi
    done
  fi
  zle -R -c
}

## install win32yank
function install-win32yank() {
  if IsWSL; then
    local WIN32YANK_DIR="/mnt/c/win32yank"
    [[ ! -d "$WIN32YANK_DIR" ]] && mkdir -p $WIN32YANK_DIR
    if [[ ! -f "$WIN32YANK_DIR/win32yank.exe" ]]; then
      trap 'rm -f win32yank-x86.zip' EXIT

      echo "Install win32yank"
      local WIN32YANK_VERSION=$(curl -s https://api.github.com/repos/equalsraf/win32yank/tags | jq -r '.[0].name')
      curl -OL -# "https://github.com/equalsraf/win32yank/releases/download/$WIN32YANK_VERSION/win32yank-x86.zip"
      unzip -q -u win32yank-x86.zip win32yank.exe -d $WIN32YANK_DIR
    fi
  fi
}
IsWSL && install-win32yank

### Zinit's installer

export ZINIT="$HOME/.local/share/zinit"
export ENHANCD_COMMAND=cdd
if [[ ! -f "$ZINIT/zinit.git/zinit.zsh" ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p $ZINIT && command chmod g-rwX $ZINIT
    command git clone https://github.com/zdharma-continuum/zinit "$ZINIT/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$ZINIT/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

zinit light dracula/zsh

zinit ice wait"!0" blockf silent
zinit light "zsh-users/zsh-completions"

zinit ice wait"!0" silent
zinit light b4b4r07/enhancd

zinit ice wait"!0" silent atload"_zsh_autosuggest_start"
zinit light zsh-users/zsh-autosuggestions

# zinit light marlonrichert/zsh-autocomplete

### Bind keys ###
zle -N ghq-fzf
zle -N edit-command-line
bindkey -e
bindkey '^G' ghq-fzf
bindkey '^[' autosuggest-accept
bindkey '^x^e' edit-command-line

# PATH
export PATH=$PATH
if uname -a | grep -sq "Linux"; then
  # WSL windows paths
  if IsWSL; then
    # PATH=$PATH:"/mnt/c/Windows/System32"
    # PATH=$PATH:"/mnt/c/Windows/System32/WindowsPowerShell/v1.0/"
    # PATH=$PATH:"/mnt/c/Program Files (x86)/NVIDIA Corporation/PhysX/Common"
    # PATH=$PATH:"/mnt/c/Program Files/NVIDIA Corporation/NVIDIA NvDLISR"
    PATH=$PATH:"/mnt/c/win32yank/"
    PATH=$PATH:"/mnt/c/Users/tminamiii/AppData/Local/Programs/Microsoft VS Code/bin"
    PATH=$PATH:"/mnt/c/Program Files/Docker/Docker/resources/bin"
    PATH=$PATH:"/mnt/c/ProgramData/DockerDesktop/version-bin"
  fi

  android_sdk_root="${HOME}/Android/Sdk"
  PATH=$PATH:"${android_sdk_root}/bin"
  PATH=$PATH:"${android_sdk_root}/cmdline-tools/latest/bin"
  PATH=$PATH:"/usr/local/android-studio/bin"

  PATH="/usr/local/flutter/bin":$PATH
  PATH="/snap/bin":$PATH
elif IsMacOS; then
  PATH=$PATH:"/Users/takahiro.minami/Library/Android/sdk/platform-tools"
fi

PATH="$HOME/bin":$PATH
PATH="$HOME/.local/bin":$PATH
PATH="$JAVA_HOME/bin":$PATH
PATH="$DENO_INSTALL/bin":$PATH
PATH="$HOME/.cargo/bin":$PATH
PATH="$HOME/go/bin":$PATH
PATH="/usr/local/protobuf/bin":$PATH
PATH="/usr/local/go/bin":$PATH
PATH="$HOME/.anyenv/bin":$PATH

## install programming languages
function install-go(){
    local LATEST_GO_VERSION=$(curl -s 'https://go.dev/dl/?mode=json' | jq -r '[.[]][0].version')

    local ARCH=""
    [[ "$(uname -m)" = "x86_64" ]] && ARCH="amd64"
    [[ "$(uname -m)" = "arm64" ]] && ARCH="arm64"

    local OS=""
    IsMacOS && OS="darwin"
    IsUbuntu && OS="linux"

    local GOGZ="${LATEST_GO_VERSION}.${OS}-${ARCH}.tar.gz"

    trap 'rm ${GOPKG}' EXIT
    sudo curl -OL --progress-bar "https://go.dev/dl/${GOGZ}"
    sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf "${GOGZ}"
}

[[ ! -f $(which go) ]] && install-go
[[ ! -f $(which deno) ]] && curl -fsSL https://deno.land/install.sh | sh
[[ ! -f $(which rustc) ]] && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

# anyenv
export ANYENV_ROOT="$HOME/.anyenv"
export PYENV_ROOT="$HOME/.anyenv/envs/pyenv"

function anyenv-cache() {
  [[ -d $CACHE_HOME/anyenv ]] || mkdir -p $CACHE_HOME/anyenv
  anyenv init - --no-rehash > $CACHE_HOME/anyenv/init.zsh
}

if [[ ! -x "$HOME/.anyenv/bin/anyenv" ]]; then
  git clone https://github.com/anyenv/anyenv $HOME/.anyenv
  mkdir -p $($ANYENV_ROOT/bin/anyenv root)/plugins
  git clone https://github.com/znz/anyenv-update.git $(anyenv root)/plugins/anyenv-update

  $HOME/.anyenv/bin/anyenv init
  $ANYENV_ROOT/bin/anyenv install pyenv
  $ANYENV_ROOT/bin/anyenv install nodenv
  $ANYENV_ROOT/bin/anyenv install rbenv
  $ANYENV_ROOT/bin/anyenv install tfenv
  anyenv-cache
fi

if [[ -x "$ANYENV_ROOT/bin/anyenv" ]]; then
    [[ -f "$CACHE_HOME/anyenv/init.zsh" ]] || anyenv-cache
    source $CACHE_HOME/anyenv/init.zsh
fi

## sdkman
export SDKMAN_DIR="${HOME}/.sdkman"
[[ -s "${HOME}/.sdkman/bin/sdkman-init.sh" ]] && source "${HOME}/.sdkman/bin/sdkman-init.sh"

## fzf rendering speed up omajinai
echo "yes" | fzf --select-1 --exit-0 && clear

[[ ~/.zshrc -nt ~/.zshrc.zwc ]] && zcompile ~/.zshrc

# if (which zprof > /dev/null 2>&1) ;then
#   zprof
# fi

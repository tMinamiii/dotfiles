#!/bin/zsh

set bell-style none
skip_global_compinit=1
setopt no_beep

export HISTFILE=${HOME}/.zsh_history
# if [[ -f ${HOME}/OneDrive/conf/.zsh_history ]]; then
#   export HISTFILE=${HOME}/OneDrive/conf/.zsh_history
# else
#   export HISTFILE=${HOME}/.zsh_history
# fi
export HISTSIZE=10000
export SAVEHIST=10000000
setopt hist_ignore_dups
# setopt share_history
setopt EXTENDED_HISTORY
setopt hist_ignore_all_dups
setopt hist_ignore_space
setopt hist_verify
setopt hist_no_store
setopt inc_append_history

[ "$TMUX" != "" ] && export TERM="screen-256color"
export MANPATH="/usr/local/man:$MANPATH"

export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export ARCHFLAGS="-arch x86_64"

export EDITOR="vim"
export SHELL=/bin/zsh
export ANYENV_ROOT="$HOME/.anyenv"
export XDG_CACHE_HOME="$HOME/.cache"
export PYENV_ROOT="$HOME/.anyenv/envs/pyenv"
export PHPENV_ROOT="$HOME/.anyenv/envs/phpenv"
export GOENV_ROOT=$HOME/.goenv
export GTAGSLABEL=pygments
export GO111MODULE=on
export TERM=xterm-256color
export PIPENV_VENV_IN_PROJECT=true
export FZF_DEFAULT_OPTS='--height 40% --border'
export GOOGLE_APPLICATION_CREDENTIALS="$HOME/.gcp.json"
export LSCOLORS=gxfxxxxxcxxxxxxxxxgxgx
export LS_COLORS='di=01;36:ln=01;35:ex=01;32'
export DENO_INSTALL="${HOME}/.deno"
export PATH="$DENO_INSTALL/bin:$PATH"
export PATH=$HOME/.cargo/bin:$PATH
export PATH=$GOENV_ROOT/bin:$PATH
export PATH=$HOME/.goenv/bin:$PATH

zstyle ':completion:*' list-colors 'di=36' 'ln=35' 'ex=32'

function ec2() {
  if [ -z "$1" ]; then
    local username="delish"
  elif [ "$1" = "u" ]; then
    local username="ubuntu"
  else
    local username=$1
  fi
  local src=$(aws ec2 describe-instances --query 'Reservations[*].[[Instances[*].[InstanceId, PublicDnsName, PublicIpAddress, [Tags[?Key==`Name`].Value][0][0]]]]' --output text | grep -v None | grep -v 'ECS Instance' | grep -v 'worker' | fzf )
  local name=$(echo ${src} | awk '{print $4}')
  local ipaddr=$(echo ${src} | awk '{print $3}')
  if echo ${name} | grep -sq "dev"; then
    ssh -o ServerAliveInterval=60 -i ~/.ssh/delish-dev.pem ${username}@${ipaddr}
  elif echo ${name} | grep -sq "deploy"; then
    ssh -o ServerAliveInterval=60 -i ~/.ssh/delish-production.pem ubuntu@${ipaddr}
  else
    ssh -o ServerAliveInterval=60 -i ~/.ssh/delish-production.pem ${username}@${ipaddr}
  fi
}


function ecs-ec2() {
  local src=$(aws ec2 describe-instances --query 'Reservations[*].[[Instances[*].[InstanceId, PublicDnsName, PublicIpAddress, [Tags[?Key==`Name`].Value][0][0]]]]' --output text | grep -v None | grep 'ECS Instance' | fzf )
  local name=$(echo ${src} | awk '{print $7}')
  local ipaddr=$(echo ${src} | awk '{print $3}')
  if echo ${name} | grep -sq "dev"; then
    ssh -o ServerAliveInterval=60 -i ~/.ssh/delish-dev.pem ec2-user@${ipaddr}
  else
    ssh -o ServerAliveInterval=60 -i ~/.ssh/delish-production.pem ec2-user@${ipaddr}
  fi
}

function dev-cluster() {
  local cluster="dev-delish"
  local service_name=$(echo "dev-delish-server3\ndev-delish-flyer\nt-minami-dev-delish-server\n" | fzf)
  local task_arns=$(aws ecs list-tasks --cluster "${cluster}" --service-name "${service_name}" --output text | fzf)
  local task_arn=$(echo ${task_arns} | awk '{print $2}')
  local server_container_instance_arn=$(aws ecs describe-tasks --cluster "${cluster}" --tasks "${task_arn}" | jq -r '.tasks[0].containerInstanceArn')
  local ec2_instance_id=$(aws ecs describe-container-instances --cluster "${cluster}" --container-instances "${server_container_instance_arn}" --query 'containerInstances[*].[[ec2InstanceId]]' --output text)
  local ipaddr=$(aws ec2 describe-instances --instance-ids "${ec2_instance_id}" | jq -r '.[][0].Instances[0].NetworkInterfaces[0].Association.PublicIp')
  ssh -o ServerAliveInterval=60 -i ~/.ssh/delish-dev.pem ec2-user@${ipaddr}
}

function prd-cluster() {
  local cluster="delish2"
  local service_name=$(echo "delish-server3\ndelish-flyer\n" | fzf)
  local task_arns=$(aws ecs list-tasks --cluster "${cluster}" --service-name "${service_name}" --output text | fzf)
  local task_arn=$(echo ${task_arns} | awk '{print $2}')
  local server_container_instance_arn=$(aws ecs describe-tasks --cluster "${cluster}" --tasks "${task_arn}" | jq -r '.tasks[0].containerInstanceArn')
  local ec2_instance_id=$(aws ecs describe-container-instances --cluster "${cluster}" --container-instances "${server_container_instance_arn}" --query 'containerInstances[*].[[ec2InstanceId]]' --output text | fzf)
  local ipaddr=$(aws ec2 describe-instances --instance-ids "${ec2_instance_id}" | jq -r '.[][0].Instances[0].NetworkInterfaces[0].Association.PublicIp')
  ssh -o ServerAliveInterval=60 -i ~/.ssh/delish-production.pem ec2-user@${ipaddr}
}

if uname -a | grep -sq "Ubuntu"; then
  # export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
  # PATH="$JAVA_HOME/bin:$PATH"
  export JAVA_HOME=$HOME/.sdkman/candidates/java/current
  export PATH=$JAVA_HOME/bin:$PATH
elif [ "$(uname)" = "Darwin" ]; then
  test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
  export JAVA_HOME=$HOME/.sdkman/candidates/java/current
  export PATH=$JAVA_HOME/bin:$PATH
elif [ -n "$WSL_DISTRO_NAME" ]; then
  PATH="/mnt/c/Windows/System32:$PATH"
  export JAVA_HOME=$HOME/.sdkman/candidates/java/current
  export PATH=$JAVA_HOME/bin:/mnt/c/Windows/System32/WindowsPowerShell/v1.0/:$PATH
  export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
  eval `ssh-agent` > /dev/null 2>&1
  ## WSL genie for daemonize docker
  # if [ "`ps -eo pid,lstart,cmd | grep systemd | grep -v -e grep -e systemd- -e /lib/systemd/systemd | awk 'NR==1 { print $1 }'`" != "1" ]; then
  #  genie -s
  # fi
  if [[ -v INSIDE_GENIE ]]; then
    echo -n " * Waiting for systemd (user)..."
    until systemctl --user is-system-running &>/dev/null
    do
      sleep 1
      echo -n "."
    done
    echo
  fi
fi

export PATH="$PATH:$HOME/.anyenv/bin:$HOME/.local/bin:$HOME/.cargo/bin:$HOME/bin"
#:$GOBIN:$HOME/go/bin:/usr/local/go/bin

if [ "$(uname)" = "Darwin" ]; then
  # ls, the common ones I use a lot shortened for rapid fire usage
  alias ls='ls -G'
  alias l='ls -lFhG'     #size,show type,human readable
  alias la='ls -lAFhG'   #long list,show almost all,show type,human readable
  alias lr='ls -tRFhG'   #sorted by date,recursive,show type,human readable
  alias lt='ls -ltFhG'   #long list,sorted by date,show type,human readable
  alias ll='ls -lG'      #long list
  alias grep='grep -G'
  alias sgrep='grep -R -n -H -C 5 --exclude-dir={.git,.svn,CVS} '
  alias t='tail -f'
else
  # ls, the common ones I use a lot shortened for rapid fire usage
  alias ls='ls --color'
  alias l='ls -lFh --color'     #size,show type,human readable
  alias la='ls -lAFh --color'   #long list,show almost all,show type,human readable
  alias lr='ls -tRFh --color'   #sorted by date,recursive,show type,human readable
  alias lt='ls -ltFh --color'   #long list,sorted by date,show type,human readable
  alias ll='ls -l --color'      #long list
  alias grep='grep --color'
  alias sgrep='grep -R -n -H -C 5 --exclude-dir={.git,.svn,CVS} '
  alias t='tail -f'
  if [ -n "$WSL_DISTRO_NAME" ]; then
    alias open='wsl-open'
  else
    alias open='xdg-open'
  fi
fi
alias zshrc='${=EDITOR} ~/.zshrc' # Quick access to the ~/.zshrc file
alias vimrc='${=EDITOR} ~/.vim/init.vim' # Quick access to the ~/.zshrc file

# Command line head / tail shortcuts
alias -g H='| head'
alias -g T='| tail'
alias -g G='| grep'
alias -g L="| less"
alias -g M="| most"
alias -g LL="2>&1 | less"
alias -g CA="2>&1 | cat -A"
alias -g NE="2> /dev/null"
alias -g NUL="> /dev/null 2>&1"
alias -g P="2>&1| pygmentize -l pytb"

# alias dud='du -d 1 -h'
# alias duf='du -sh *'
alias fd='find . -type d -name'
alias ff='find . -type f -name'

alias h='history'
alias hgrep="fc -El 0 | grep"
alias help='man'
alias p='ps -f'
alias sortnr='sort -n -r'
alias unexport='unset'

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

alias venv='source .venv/bin/activate'
alias build-vim='sudo echo "start" && make clean && make distclean  && ./configure  --prefix=/usr/local/ --with-features=huge --enable-multibyte --enable-gpm --enable-cscope --enable-perlinterp --enable-python3interp --with-python3-command=$(echo $HOME)/.anyenv/envs/pyenv/shims/python --enable-rubyinterp --enable-luainterp --enable-acl --enable-fontset --enable-xim --enable-terminal --enable-fail-if-missing --with-luajit --with-x && make -j12 && sudo make install'
alias make-vim='build-vim'
alias build-nvim='sudo echo "start" && sudo rm -rf .deps build && sudo make clean && sudo make CMAKE_BUILD_TYPE=Release -j12 && sudo make CMAKE_INSTALL_PREFIX=/usr/local install'
alias make-nvim='build-nvim'
alias tmux-reload='tmux source-file ~/.tmux.conf'
alias php-parse-stubs='composer run-script --working-dir="./vendor/felixfbecker/language-server" parse-stubs'
alias glog='git log --graph --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit --date=relative'
alias glogalga='log --graph --all --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit --date=relative'
alias dus='du --max-depth=1 -h | sort -nr'
alias sync-monitor='sudo cp ~/.config/monitors.xml ~gdm/.config/'
# echo 70 > /sys/class/power_supply/BAT0/charge_start_threshold
# echo 85 > /sys/class/power_supply/BAT0/charge_stop_threshold
# docker
alias docker-ps='docker ps -a'
alias docker-rm='docker stop $(docker ps -aq) && docker rm $(docker ps -aq)'
alias docker-prune='docker system prune --volumes'

# raspi
alias pi1='ssh ubuntu@172.16.27.10'
alias pi2='ssh ubuntu@172.16.27.11'
alias pi3='ssh ubuntu@172.16.27.12'

# language setup
alias py-setup='curl -sSfL -H "Expires: 0" -H "Cache-Control: no-cache, no-store, must-revalidate" -H "Pragma: no-cache" https://git.io/Ju0Rv | bash'
alias ts-setup='curl -sSfL -H "Expires: 0" -H "Cache-Control: no-cache, no-store, must-revalidate" -H "Pragma: no-cache" https://raw.githubusercontent.com/tMinamiii/dotfiles/master/templates/typescript/install.sh | sh'
alias ide="$HOME/dotfiles/tmux/ide.sh"
### ghq + fzf
alias github='gh-open $(repos)'
alias pipenv='poetry'
alias tailscale='ip addr show tailscale0'
alias up-zsh='cp -rf ~/.zsh_history ~/OneDrive/conf/.zsh_history'
alias down-zsh='cp -rf ~/OneDrive/conf/.zsh_history ~/.zsh_history'
alias oreore='openssl req -x509 -nodes -days 36500 -newkey rsa:2048 -keyout private.key -out public.crt'
alias fetch-prettier='curl -O https://gist.githubusercontent.com/tMinamiii/8a2db0ab4fc95679a72e56eae987364b/raw/2b18caf03ea9e9b1f32ed7d81626e9973f9da12c/.prettierrc.yaml'

function ghq-fzf() {
  local src=$(ghq list | fzf )
  local root_list=($(ghq root --all))
  if [ -n "$src" ]; then
    for root in $root_list; do
      if [ -e "${root}/${src}" ]; then
        BUFFER="cd ${root}/${src}"
        zle accept-line
      fi
    done
  fi
  zle -R -c
}

[ -f "$(which hub)" ] && eval "$(hub alias -s)"
[ -f "$(which direnv)" ] && eval "$(direnv hook zsh)"

### anyenv ###
# [ -f ~/.anyenv/bin/anyenv ] && eval "$(anyenv init - --no-rehash)"
function anyenv-cache() {
    [[ -d $XDG_CACHE_HOME/anyenv ]] || mkdir -p $XDG_CACHE_HOME/anyenv
    anyenv init - --no-rehash > $XDG_CACHE_HOME/anyenv/init.zsh
}


if [[ -x $ANYENV_ROOT/bin/anyenv ]]; then
    [[ -f $XDG_CACHE_HOME/anyenv/init.zsh ]] || anyenv-cache
    source $XDG_CACHE_HOME/anyenv/init.zsh
fi

export ZINIT="$HOME/.zinit"
export ENHANCD_COMMAND=cdd

### zinit ###
#
if [[ ! -f $ZINIT/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing DHARMA Initiative Plugin Manager (zdharma/zinit)…%f"
    command mkdir -p "$ZINIT" && command chmod g-rwX "$ZINIT"
    command git clone https://github.com/zdharma/zinit "$ZINIT/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f" || \
        print -P "%F{160}▓▒░ The clone has failed.%f"
fi
source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
autoload -Uz edit-command-line
(( ${+_comps} )) && _comps[zinit]=_zinit

zinit light zsh-users/zsh-autosuggestions
# zinit light zdharma/fast-syntax-highlighting
zinit light dracula/zsh
zinit light b4b4r07/enhancd

### Bind keys ###
zle -N ghq-fzf
zle -N edit-command-line
bindkey -e
bindkey '^G' ghq-fzf
bindkey '^[' autosuggest-accept
bindkey '^x^e' edit-command-line

### FZF
if [ -f ~/.fzf.zsh ]; then
  source ~/.fzf.zsh
else
  git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
  ~/.fzf/install
fi

if [ ~/.zshrc -nt ~/.zshrc.zwc ]; then
  zcompile ~/.zshrc
fi

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="${HOME}/.sdkman"
[[ -s "${HOME}/.sdkman/bin/sdkman-init.sh" ]] && source "${HOME}/.sdkman/bin/sdkman-init.sh"

set encoding=utf-8
scriptencoding utf-8
set completeopt+=menuone,noinsert,noselect

""""" [検索系]
set ignorecase                  " 大文字小文字を区別しない
set smartcase                   " 検索文字に大文字がある場合は大文字小文字を区別
set incsearch                   " インクリメンタルサーチ
set hlsearch                    " 検索マッチテキストをハイライト

""""" [編集系]
set hidden                      " バッファを閉じる代わりに隠す（Undo履歴を残すため）
set switchbuf=useopen           " 新しく開く代わりにすでに開いてあるバッファを開く
set showmatch                   " 対応する括弧などをハイライト表示する
set matchtime=2                 " 対応括弧のハイライト表示を3秒にする
set backspace=indent,eol,start
set noswapfile
set nobackup
set noundofile

set clipboard&
set clipboard^=unnamedplus,unnamed
set updatetime=500
set shortmess+=c
set signcolumn=yes
""""" [表示系]
set number                      " 行番号の表示
set nowrap                      " 長いテキストの折り返し
set textwidth=0                 " 自動的に改行が入るのを無効化
set novisualbell                " 前時代的スクリーンベルを無効化
set display=lastline
set softtabstop=0
set showtabline=0               " 常にタブラインを表示
set laststatus=2
set cmdheight=1
set whichwrap=b,s,<,>,[,]       " wrapするカッコ一覧
set list                        " 不可視文字の可視化
set listchars=tab:\|\ ,trail:￭,extends:❯,precedes:❮ ",nbsp:%,eol:￭¬↲ "不可視文字をUnicodeにする
set ttimeout
set ttimeoutlen=10
set scrolloff=20                 " 3行残して画面スクロールする
set shell=zsh
set noequalalways
set ttyfast
set lazyredraw
set ambiwidth=single
set termguicolors
set wildmenu
set wildmode=full
set wildoptions=pum
set pumheight=10

"" for tmux 24bit color
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
let &t_ti.="\e[1 q"
let &t_SI.="\e[5 q"
let &t_EI.="\e[1 q"
let &t_te.="\e[0 q"


function! IsWSL()
    return $WSL_DISTRO_NAME != ""
endfunction

function! IsTMUX()
    return exists('$TMUX')
endfunction

let mapleader = "\<Space>"

"---------------------------------------------------------------------------"
" Commands \ Modes | Normal | Insert | Command | Visual | Select | Operator |
"------------------|--------|--------|---------|--------|--------|----------|
" map  / noremap   |    @   |   -    |    -    |   @    |   @    |    @     |
" nmap / nnoremap  |    @   |   -    |    -    |   -    |   -    |    -     |
" vmap / vnoremap  |    -   |   -    |    -    |   @    |   @    |    -     |
" omap / onoremap  |    -   |   -    |    -    |   -    |   -    |    @     |
" xmap / xnoremap  |    -   |   -    |    -    |   @    |   -    |    -     |
" smap / snoremap  |    -   |   -    |    -    |   -    |   @    |    -     |
" map! / noremap!  |    -   |   @    |    @    |   -    |   -    |    -     |
" imap / inoremap  |    -   |   @    |    -    |   -    |   -    |    -     |
" cmap / cnoremap  |    -   |   -    |    @    |   -    |   -    |    -     |
"---------------------------------------------------------------------------"
"
""""" key remap
nnoremap <silent> <ESC><ESC> :noh<CR>
nnoremap <silent> <M-p> :bp<CR>
nnoremap <silent> <M-n> :bn<CR>
nnoremap <silent> <M-d> :bd<CR>
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>
" バックスラッシュやクエスチョンを状況に合わせ自動的にエスケープ
cnoremap <expr> / getcmdtype() == '/' ? '\/' : '/'
cnoremap <expr> ? getcmdtype() == '?' ? '\?' : '?'

" vim strict mode
vnoremap  <C-c>    <nop>
vnoremap  <Up>     <nop>
vnoremap  <Down>   <nop>
vnoremap  <Left>   <nop>
vnoremap  <Right>  <nop>

inoremap  <C-h>    <BS>
inoremap  <C-l>    <DEL>
inoremap  <C-c>    <nop>
inoremap  <Up>     <nop>
inoremap  <Down>   <nop>
inoremap  <Left>   <nop>
inoremap  <Right>  <nop>

nnoremap   <silent> <C-k> {
nnoremap   <silent> k     gk
nnoremap   <silent> G     G zz
nnoremap   <expr>   j      (line('.') == line('$')) ? 'zz' : 'gj'
nnoremap   <expr>   <C-d>  (line('.') == line('$')) ? 'zz' : '<C-d> '
nnoremap   <expr>   <C-j>  (line('.') == line('$')) ? 'zz' : '}'
nnoremap   <C-c>    <nop>
nnoremap   <Up>     <nop>
nnoremap   <Down>   <nop>
nnoremap   <Left>   <nop>
nnoremap   <Right>  <nop>

tnoremap <C-j><C-j> <C-\><C-n>

""""" command """""
" よく押し間違えるので
command! Q :q
command! W :w
command! Wq :wq
command! WQ :wq
command! T :bo terminal ++rows=20

if has('terminal')
  function! s:set_default_ansi_colors() abort
    if exists('g:terminal_ansi_colors')
      return
    endif

    let g:terminal_ansi_colors = [
      \ "#073642", "#c50f1f", "#13a10e", "#c19c00",
      \ "#3399ff", "#881798", "#3a96dd", "#cccccc",
      \ "#989898", "#e74856", "#16c60c", "#eadf84",
      \ "#3b78ff", "#b4009e", "#61d6d6", "#e8e8e8"
      \ ]
  endfunction
  call s:set_default_ansi_colors()

  augroup vimrc
    autocmd ColorScheme * call s:set_default_ansi_colors()
  augroup END
endif

augroup autoreload
  set autoread
  autocmd FocusLost,FocusGained,CursorMoved,CursorMovedI,CursorHold,CursorHoldI  * silent! checktime
augroup END

augroup filetypes
  autocmd BufRead,BufNewFile Dockerfile* setfiletype dockerfile
  autocmd BufRead,BufNewFile *php_cs*    setfiletype php
  autocmd BufRead,BufNewFile *zshrc      setfiletype zsh
  autocmd BufRead,BufNewFile *zsh        setfiletype zsh
  autocmd BufRead,BufNewFile *.mjs       setfiletype javascript
  autocmd BufRead,BufNewFile *.csv       setfiletype csv
  autocmd BufRead,BufNewFile .env*       setfiletype sh
  autocmd BufWritePre        * :%s/\s\+$//ge
  autocmd BufWritePre        * :%s/\r//ge
augroup END

set expandtab                   " タブをスペースにする
set tabstop=2
set shiftwidth=2
set conceallevel=2
set concealcursor=nc
augroup indentsize
  autocmd FileType sh         setlocal shiftwidth=2 tabstop=2
  autocmd FileType vue        setlocal shiftwidth=2 tabstop=2
  autocmd FileType blade      setlocal shiftwidth=2 tabstop=2
  autocmd FileType yaml       setlocal shiftwidth=2 tabstop=2
  autocmd FileType javascript setlocal shiftwidth=2 tabstop=2
  autocmd FileType typescript setlocal shiftwidth=2 tabstop=2
  autocmd FileType json       setlocal shiftwidth=2 tabstop=2
  autocmd FileType html       setlocal shiftwidth=2 tabstop=2
  autocmd FileType go         setlocal shiftwidth=4 tabstop=4 noexpandtab
  autocmd FileType vim        setlocal shiftwidth=2 tabstop=2
  autocmd FileType python     setlocal shiftwidth=4 tabstop=4
  autocmd FileType c          setlocal shiftwidth=4 tabstop=4
  autocmd FileType make       setlocal shiftwidth=4 tabstop=4 noexpandtab
  autocmd FileType markdown   setlocal shiftwidth=2 tabstop=2 conceallevel=0
  autocmd FileType gitconfig  setlocal noexpandtab
augroup END

if has('nvim')
  let g:loaded_perl_provider = 0
  if IsWSL()
    let g:clipboard = {
        \   'name': 'myClipboard',
        \   'copy': {
        \      '+': 'win32yank.exe -i',
        \      '*': 'win32yank.exe -i',
        \    },
        \   'paste': {
        \      '+': 'win32yank.exe -o',
        \      '*': 'win32yank.exe -o',
        \   },
        \   'cache_enabled': 1,
        \ }
  endif

  if exists('$VIRTUAL_ENV')
    let g:python3_host_prog=$VIRTUAL_ENV.'/bin/python'
  else
    let s:python3_version=system('cat $PYENV_ROOT/version | tr -d "\n"')
    let g:python3_host_prog=$PYENV_ROOT.'/versions/'.s:python3_version.'/bin/python'
  endif

  let s:vim_plug_root = '~/.cache/nvim/plugged'
  let s:vim_plug_plugins = '~/.cache/nvim/plugins'
  set rtp+=~/.cache/nvim/plugged/vim-plug
  set rtp+=~/.cache/nvim/plugins
else
  if IsWSL()
    augroup Yank
      au!
      autocmd TextYankPost * :call system('win32yank.exe -i', @")
    augroup END
    noremap <silent> p :call setreg('"',system('win32yank.exe -o'))<CR>""p
  endif

  let s:vim_plug_root = '~/.cache/vim/plugged'
  let s:vim_plug_plugins = '~/.cache/vim/plugins'
  set rtp+=~/.cache/vim/plugged/vim-plug
  set rtp+=~/.cache/vim/plugins
endif

if !isdirectory(expand(s:vim_plug_plugins))
  call system('mkdir -p ' . s:vim_plug_plugins)
endif

if !isdirectory(expand(s:vim_plug_root))
  echo 'install vim-plug...'
  call system('mkdir -p ' . s:vim_plug_root . 'vim-plug')
  call system('git clone https://github.com/junegunn/vim-plug.git ' . s:vim_plug_root . '/vim-plug/autoload')
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
else
   autocmd VimEnter * PlugUpdate q
endif

call plug#begin(s:vim_plug_plugins)
    Plug 'wakatime/vim-wakatime'
    Plug 'preservim/nerdtree'
      nmap <silent><Leader>n :NERDTreeToggle<CR>
      nmap <silent><Leader>h :NERDTreeFind<CR>
      let g:NERDTreeWinSize = 35
      let g:NERDTreeLimitedSyntax = 1
      let g:NERDTreeQuitOnOpen = 0
      augroup nerdtree_hook_add
          autocmd FileType nerdtree nmap <buffer> l o
          autocmd FileType nerdtree nmap <buffer> <C-0> o
          autocmd FileType nerdtree nmap <buffer> <C-n> j
          autocmd FileType nerdtree nmap <buffer> <C-p> k
      augroup END

   Plug 'rhysd/vim-color-spring-night'
      let g:spring_night_kill_italic = 1
   Plug 'kaicataldo/material.vim'
      let g:material_terminal_italics = 0
      let g:material_theme_style = 'palenight'

    Plug 'itchyny/lightline.vim'
      let g:lightline = {
                  \ 'colorscheme': 'material',
                  \ 'active': {
                  \   'left': [ [ 'mode', 'paste' ], ['fugitive', 'filename', 'modified', 'readonly' ] ],
                  \   'right': [ [ 'percent' ], [ 'fileformat', 'fileencoding', 'filetype' ] ]
                  \ },
                  \ 'inactive': {
                  \     'left': [ [ 'filename' ] ],
                  \     'right': [ [ 'lineinfo' ], [ 'percent' ] ]
                  \ },
                  \ 'tabline': {'left': [['buffers']], 'right': [['close']]},
                  \ 'component_function': {
                  \   'fugitive': 'LightlineFugitive',
                  \   'filename': 'LightlineFilename',
                  \   'fileformat': 'LightlineFileformat',
                  \   'filetype': 'LightlineFiletype',
                  \   'fileencoding': 'LightlineFileencoding',
                  \   'mode': 'LightlineMode',
                  \ },
                  \ 'component_expand': {
                  \   'buffers': 'lightline#bufferline#buffers',
                  \ },
                  \ 'component_type': {
                  \   'syntastic': 'error',
                  \   'buffers': 'tabsel',
                  \ },
                  \ 'subseparator': { 'left': '|', 'right': '|' }
                  \ }

      function! LightlineModified()
          return &filetype =~? 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
      endfunction

      function! LightlineReadonly()
          return &filetype !~? 'help' && &readonly ? 'RO' : ''
      endfunction

      function! LightlineFilename()
          let fname = expand('%:t')
          return fname ==? '__Tagbar__' ? g:lightline.fname :
                  \ fname =~? '__Gundo\|NERD_tree' ? '' :
                  \ ('' !=? LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
                  \ ('' !=? fname ? fname : '[No Name]') .
                  \ ('' !=? LightlineModified() ? ' ' . LightlineModified() : '')
      endfunction

      function! LightlineFugitive()
          try
              if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &filetype !~? 'vimfiler' && exists('*fugitive#head')
                  let mark = ''  " edit here for cool mark
                  let branch = fugitive#head()
                  return branch !=# '' ? mark.branch : ''
              endif
          catch
          endtry
          return ''
      endfunction

      function! LightlineFileformat()
          return winwidth(0) > 70 ? &fileformat : ''
      endfunction

      function! LightlineFiletype()
          return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
      endfunction

      function! LightlineFileencoding()
          return winwidth(-1) > 70 ? (&fileencoding !=# '' ? &fileencoding : &encoding) : ''
      endfunction

      function! LightlineMode()
          let fname = expand('%:t')
          return fname ==? '__Tagbar__' ? 'Tagbar' :
                      \ fname ==? '__Gundo__' ? 'Gundo' :
                      \ fname ==? '__Gundo_Preview__' ? 'Gundo Preview' :
                      \ fname =~? 'NERD_tree' ? 'NERDTree' :
                      \ winwidth(0) > 60 ? lightline#mode() : ''
      endfunction

      let g:tagbar_status_func = 'TagbarStatusFunc'

      function! TagbarStatusFunc(current, sort, fname, ...) abort
          let g:lightline.fname = a:fname
          return lightline#statusline(0)
      endfunction

      let g:unite_force_overwrite_statusline = 0
      let g:vimfiler_force_overwrite_statusline = 0
      let g:vimshell_force_overwrite_statusline = 0

    Plug 'liuchengxu/vista.vim'
      nmap <silent> <C-f><C-v> :<C-u>Vista vim_lsp<CR>
      let g:vista_close_on_jump = 1
      let g:vista_icon_indent = ['`-> ', '|-> ']
      let g:vista#renderer#enable_icon = 0
      let g:vista#renderer#icons = {
                  \   'function': 'func',
                  \   'variable': 'var',
                  \   'field': 'field',
                  \   'struct': 'struct',
                  \   'constant': 'const',
                   \  }

    Plug 'terryma/vim-multiple-cursors'

    Plug 'osyo-manga/vim-over'
      nmap <silent> <Leader>o :OverCommandLine<CR>

    Plug 'sheerun/vim-polyglot'
      let g:vim_json_syntax_conceal = 0

    Plug 'tpope/vim-fugitive'

    Plug 'deris/vim-shot-f'

    Plug 'machakann/vim-highlightedyank'

    Plug 'simeji/winresizer'
      let g:winresizer_vert_resize = 1
      let g:winresizer_horiz_resize = 1

    Plug 'Yggdroot/indentLine'
      let g:indentLine_showFirstIndentLevel = 1
      let g:indentLine_bufNameExclude = ['_.*', 'NERD_tree.*']
      let g:indentLine_bufTypeExluce = ['help', 'nerdtree', 'terminal']
      let g:indentLine_fileTypeExluce = ['help', 'nerdtree']
      let g:indentLine_color_term = 238
      let g:indentLine_color_gui = '#676767'
      let g:indentLine_setConceal = 0

    Plug 'andymass/vim-matchup'
      let g:loaded_matchit = 1

    Plug 'tpope/vim-surround'

    Plug 'easymotion/vim-easymotion'
      nmap <Leader> <Plug>(easymotion-prefix)

    " Plug 'junegunn/vim-easy-align'
    "   nmap ga <Plug>(EasyAlign)
    "   xmap ga <Plug>(EasyAlign)
    "   let g:easy_align_ignore_groups = []

    " Plug 'tomtom/tcomment_vim'
    "   vmap ? :'<,'>TComment<CR>

    Plug 'previm/previm'
      if IsWSL()
        let g:previm_open_cmd = '/mnt/c/Program\ Files\ \(x86\)/Google/Chrome/Application/chrome.exe'
        let g:previm_wsl_mode = 1
      endif
    Plug 'tyru/open-browser.vim'

    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    Plug 'junegunn/fzf.vim'
      command! -bang -nargs=? -complete=dir Files call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
      command! -bang -nargs=? -complete=dir GFiles call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
      command! -bang -nargs=* Rg
          \ call fzf#vim#grep(
          \ 'rg --column --line-number -g "!.git" --hidden --smart-case --no-heading --color=always '.shellescape(<q-args>), 1,
          \ <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
          \         : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%:hidden', '?'),
          \ <bang>0)
      let g:fzf_layout = { 'down': '~40%' }
      nmap <silent> <C-p> :GFiles<CR>
      nmap <silent> <Leader>f :Files<CR>
      nmap <silent> <Leader>g :Rg<CR>
      nmap <silent> <Leader>b :Buffers<CR>
      nmap <silent> <Leader>x :Commands<CR>

    Plug 'rhysd/git-messenger.vim'
      nmap <Leader>gm <Plug>(git-messenger)
      let g:git_messenger_include_diff = 'current'
      let g:git_messenger_always_into_popup = v:true
      let g:git_messenger_into_popup_after_show = v:true


    Plug 'mechatroner/rainbow_csv', { 'for': 'csv' }
      let g:rainbow_active = 0
      let g:rainbow_conf = {
                  \   'guifgs': ['darkorange2', 'orchid3', 'seagreen3'],
                  \   'separately': {
                  \       'nerdtree': 0,
                  \   },
                  \ }

    Plug 'plasticboy/vim-markdown', {'for' : ['markdown','mkd']}
      let g:vim_markdown_conceal = 0
      let g:vim_markdown_folding_disabled = 1

    Plug 'buoto/gotests-vim'
    Plug 'fatih/vim-go' ", { 'do': ':GoUpdateBinaries', 'for': 'go' }
      let g:go_highlight_methods = 1
      let g:go_highlight_structs = 1
      let g:go_highlight_operators = 1
      let g:go_highlight_functions = 1
      let g:go_highlight_function_parameters = 1
      let g:go_highlight_function_arguments = 1
      let g:go_highlight_function_calls = 1
      let g:go_highlight_types = 1
      let g:go_highlight_fields = 1
      let g:go_highlight_variable_declarations = 1
      let g:go_highlight_variable_assignments = 1

      let g:go_echo_command_info = 0
      let g:go_def_mapping_enabled = 0
      let g:go_gocode_propose_builtins = 0
      let g:go_echo_go_info = 0

      let g:go_diagnostics_enabled = 0
      let g:go_metalinter_autosave = 0

      "" format ""
      let g:go_fmt_autosave = 0
      let g:go_term_height = 15
      let g:go_term_mode = 'on | belowright split'
      let g:go_term_enabled = 0

      function! s:vim_go_keymap()
          nmap <buffer><silent> <Leader><C-r> :GoRun<CR>
          nmap <buffer><silent> <Leader>rt :GoTestFunc<CR>
          nmap <buffer><silent> <F5> :GoDebugContinue<CR>
          nmap <buffer><silent> <F6> :GoDebugPrint<CR>
          nmap <buffer><silent> <F9> :GoDebugBreakpoint<CR>
          nmap <buffer><silent> <F10> :GoDebugNext<CR>
          nmap <buffer><silent> <F11> :GoDebugStep<CR>
          nmap <buffer><silent> <F12> :GoDebugStop<CR>
      endfunction

      augroup vim_go_hook_add
          autocmd FileType go :call s:vim_go_keymap()
      augroup END


    Plug 'prabirshrestha/async.vim'
    Plug 'prabirshrestha/asyncomplete.vim'
    Plug 'prabirshrestha/asyncomplete-lsp.vim'
    Plug 'prabirshrestha/vim-lsp'
    Plug 'mattn/vim-lsp-settings'
      imap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
      imap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
      imap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

      let g:lsp_settings = {
      \    'efm-langserver': {
      \      'disabled': v:false
      \    },
      \    'gopls': {
      \      'initialization_options': {
      \        'staticcheck': v:true,
      \        'matcher': 'fuzzy'
      \      }
      \    },
      \    'golangci-lint-langserver': {
      \         'name': 'golangci-lint-langserver',
      \         'url': 'https://github.com/tMinamiii/golangci-lint-langserver',
      \         'cmd': {server_info->['golangci-lint-langserver']},
      \         'initialization_options': {'command': ['golangci-lint', 'run', '--fast', '--issues-exit-code=1', '--out-format', 'json']},
      \         'whitelist': ['go']
      \    }
      \  }

      let g:lsp_hover_ui = 'float'
      let g:lsp_preview_float = 1
      let g:lsp_diagnostics_enabled = 1
      let g:lsp_diagnostics_echo_cursor = 0
      let g:lsp_diagnostics_float_cursor = 1
      let g:lsp_diagnostics_float_delay = 1000
      let g:lsp_diagnostics_virtual_text_enabled = 0
      let g:lsp_diagnostics_virtual_text_insert_mode_enabled = 0
      " let g:lsp_settings_filetype_go = ['gopls', 'golangci-lint-langserver']
      let g:lsp_settings_filetype_go = ['gopls']
      let g:lsp_settings_filetype_rust = ['rust-analyzer']
      let g:lsp_settings_filetype_python = ['pyright-langserver']

      function! s:on_lsp_buffer_enabled() abort
          setlocal omnifunc=lsp#complete
          setlocal signcolumn=yes
          if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
          nmap <buffer> gd <plug>(lsp-definition)
          nmap <buffer> gr <plug>(lsp-references)
          nmap <buffer> gi <plug>(lsp-implementation)
          nmap <buffer> gt <plug>(lsp-type-definition)
          nmap <buffer> <f2> <plug>(lsp-rename)
          nmap <buffer> [g <Plug>(lsp-previous-diagnostic)
          nmap <buffer> ]g <Plug>(lsp-next-diagnostic)
          nmap <buffer> K <plug>(lsp-hover)
          nmap <buffer> <C-l><C-l> <plug>(lsp-document-diagnostics)

          let g:lsp_format_sync_timeout = 1000
          autocmd! BufWritePre *.rs,*.go,*.py,*.c,*.ts,*.js call execute('LspDocumentFormatSync')
      endfunction

      augroup lsp_install
          au!
          autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
      augroup END
      " let g:lsp_log_verbose = 1
      " let g:lsp_log_file = expand('~/vim-lsp.log')
      " for asyncomplete.vim log
      " let g:asyncomplete_log_file = expand('~/asyncomplete.log')

      "" SLOW
      "" Plug 'mattn/emmet-vim'
      """""""""""""""""""""""""

      "" Brackets
      Plug 'cohama/lexima.vim'

      "" Plug 'ctrlpvim/ctrlp.vim'
      ""   let g:ctrlp_map = '<C-p>'
      ""   let g:ctrlp_cmd = 'CtrlP'
      ""   let g:ctrlp_working_path_mode = 'ra'
      ""   let g:ctrlp_custom_ignore = {
      ""     \ 'dir':  '\v[\/]\.(git|hg|svn)$|node_modules',
      ""     \ 'file': '\v\.(exe|so|dll)$',
      ""     \ 'link': 'some_bad_symbolic_links',
      ""     \ }

      "" Plug 'mattn/ctrlp-matchfuzzy'
      ""   let g:ctrlp_match_func = {'match': 'ctrlp_matchfuzzy#matcher'}

      "" SNIPPETS
      """""""""""
      Plug 'golang/vscode-go'
      Plug 'hrsh7th/vim-vsnip'
      Plug 'hrsh7th/vim-vsnip-integ'
          " Expand
          " imap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
          " smap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'

          " Expand or jump
          imap <expr> <C-l> vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
          smap <expr> <C-l> vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'

          " Jump forward or backward
          imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
          smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
          imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
          smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'

          " Select or cut text to use as $TM_SELECTED_TEXT in the next snippet.
          " See https://github.com/hrsh7th/vim-vsnip/pull/50
          " nmap s <Plug>(vsnip-select-text)
          " xmap s <Plug>(vsnip-select-text)
          " nmap S <Plug>(vsnip-cut-text)
          " xmap S <Plug>(vsnip-cut-text)

call plug#end()

" ファイルタイププラグインおよびインデントを有効化
syntax on
try
  " let g:lightline.colorscheme = 'spring_night'
  " colorscheme spring-night
  colorscheme material
catch
endtry

hi! MatchParen guibg=#555555 guifg=NONE gui=bold
hi! Visual guibg=#888888 guifg=NONE
hi! SpecialKey ctermfg=239 ctermbg=NONE
hi! clear LineNr
hi! clear SignColumn

hi! Normal guibg=NONE ctermbg=NONE

if has('nvim')
  hi! NormalFloat    guibg=#334455 guifg=#fffeeb gui=NONE      ctermfg=235  ctermbg=230  cterm=NONE
endif

hi! Terminal       guibg=#323232 guifg=#fffeeb gui=NONE      ctermfg=235  ctermbg=230  cterm=NONE
hi! CursorLine     guibg=NONE    guifg=NONE    gui=underline ctermbg=NONE ctermfg=NONE cterm=underline
hi! CursorIM       guibg=#af00af guifg=#000000 gui=NONE      ctermbg=127  ctermfg=16   cterm=NONE
hi! HighlightedyankRegion cterm=reverse gui=reverse

autocmd FileType * call <SID>def_base_syntax() " autocmd Syntax may be better

function! s:def_base_syntax()
  " Simple example
  autocmd FileType python syntax match commonOperator "\(+\|=\|-\|\^\|\*\)"
  autocmd FileType python syntax match baseDelimiter "\(,\|\.\)"
  autocmd FileType python hi link commonOperator Operator
  autocmd FileType python hi link baseDelimiter Special
endfunction

augroup syntaxFromStart
    autocmd FileType vue :syntax sync fromstart
augroup END

if has('multi_byte_ime')
  highlight Cursor guifg=NONE guibg=Green
  highlight CursorIM guifg=NONE guibg=Purple
endif

filetype plugin indent on

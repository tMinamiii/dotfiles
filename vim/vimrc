set encoding=utf-8
scriptencoding utf-8
set completeopt+=menuone,noinsert,noselect

""""" [検索系]
set ignorecase                  " 大文字小文字を区別しない
set smartcase                   " 検索文字に大文字がある場合は大文字小文字を区別
set incsearch                   " インクリメンタルサーチ
set hlsearch                    " 検索マッチテキストをハイライト

""""" [編集系]
set hidden                      " バッファを閉じる代わりに隠す（Undo履歴を残すため）
set switchbuf=useopen           " 新しく開く代わりにすでに開いてあるバッファを開く
set showmatch                   " 対応する括弧などをハイライト表示する
set matchtime=2                 " 対応括弧のハイライト表示を3秒にする
set backspace=indent,eol,start
set noswapfile
set nobackup
set noundofile

set clipboard&
set clipboard^=unnamedplus,unnamed
set updatetime=500
set shortmess+=c
set signcolumn=yes
""""" [表示系]
set number                      " 行番号の表示
set nowrap                      " 長いテキストの折り返し
set textwidth=0                 " 自動的に改行が入るのを無効化
set novisualbell                " 前時代的スクリーンベルを無効化
set display=lastline
set softtabstop=0
set showtabline=0               " 常にタブラインを表示
set laststatus=2
set cmdheight=1
set whichwrap=b,s,<,>,[,]       " wrapするカッコ一覧
set list                        " 不可視文字の可視化
set listchars=tab:\|\ ,trail:￭,extends:❯,precedes:❮ ",nbsp:%,eol:￭¬↲ "不可視文字をUnicodeにする
set ttimeout
set ttimeoutlen=10
set scrolloff=20                 " 3行残して画面スクロールする
set shell=zsh
set noequalalways
set ttyfast
set lazyredraw
set ambiwidth=single
set termguicolors
set wildmenu
set wildmode=full
set wildoptions=pum
set pumheight=10
set modifiable

"" for tmux 24bit color
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
let &t_ti.="\e[1 q"
let &t_SI.="\e[5 q"
let &t_EI.="\e[1 q"
let &t_te.="\e[0 q"


function! IsWSL()
    return $WSL_DISTRO_NAME != ""
endfunction

function! IsTMUX()
    return exists('$TMUX')
endfunction

let mapleader = "\<Space>"

"---------------------------------------------------------------------------"
" Commands \ Modes | Normal | Insert | Command | Visual | Select | Operator |
"------------------|--------|--------|---------|--------|--------|----------|
" map  / noremap   |    @   |   -    |    -    |   @    |   @    |    @     |
" nmap / nnoremap  |    @   |   -    |    -    |   -    |   -    |    -     |
" vmap / vnoremap  |    -   |   -    |    -    |   @    |   @    |    -     |
" omap / onoremap  |    -   |   -    |    -    |   -    |   -    |    @     |
" xmap / xnoremap  |    -   |   -    |    -    |   @    |   -    |    -     |
" smap / snoremap  |    -   |   -    |    -    |   -    |   @    |    -     |
" map! / noremap!  |    -   |   @    |    @    |   -    |   -    |    -     |
" imap / inoremap  |    -   |   @    |    -    |   -    |   -    |    -     |
" cmap / cnoremap  |    -   |   -    |    @    |   -    |   -    |    -     |
"---------------------------------------------------------------------------"
"
""""" key remap
nnoremap <silent> <ESC><ESC> :noh<CR>
nnoremap <silent> <M-p> :bp<CR>
nnoremap <silent> <M-n> :bn<CR>
nnoremap <silent> <M-d> :bd<CR>
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>
" バックスラッシュやクエスチョンを状況に合わせ自動的にエスケープ
cnoremap <expr> / getcmdtype() == '/' ? '\/' : '/'
cnoremap <expr> ? getcmdtype() == '?' ? '\?' : '?'

" vim strict mode
vnoremap  <C-c>    <nop>
vnoremap  <Up>     <nop>
vnoremap  <Down>   <nop>
vnoremap  <Left>   <nop>
vnoremap  <Right>  <nop>

inoremap  <C-h>    <BS>
inoremap  <C-l>    <DEL>
inoremap  <C-c>    <nop>
inoremap  <Up>     <nop>
inoremap  <Down>   <nop>
inoremap  <Left>   <nop>
inoremap  <Right>  <nop>

nnoremap   <silent> <C-k> {
nnoremap   <silent> k     gk
nnoremap   <silent> G     G zz
nnoremap   <expr>   j      (line('.') == line('$')) ? 'zz' : 'gj'
nnoremap   <expr>   <C-d>  (line('.') == line('$')) ? 'zz' : '<C-d> '
nnoremap   <expr>   <C-j>  (line('.') == line('$')) ? 'zz' : '}'
nnoremap   <C-c>    <nop>
nnoremap   <Up>     <nop>
nnoremap   <Down>   <nop>
nnoremap   <Left>   <nop>
nnoremap   <Right>  <nop>

tnoremap <C-j><C-j> <C-\><C-n>

""""" command """""
" よく押し間違えるので
command! Q :q
command! W :w
command! Wq :wq
command! WQ :wq
command! T :bo terminal ++rows=20
command! Pu :PlugUpdate
command! Pg :PlugUpgrade
command! Pc :PlugClean

if has('terminal')
  function! s:set_default_ansi_colors() abort
    if exists('g:terminal_ansi_colors')
      return
    endif

    let g:terminal_ansi_colors = [
      \ "#073642", "#c50f1f", "#13a10e", "#c19c00",
      \ "#3399ff", "#881798", "#3a96dd", "#cccccc",
      \ "#989898", "#e74856", "#16c60c", "#eadf84",
      \ "#3b78ff", "#b4009e", "#61d6d6", "#e8e8e8"
      \ ]
  endfunction
  call s:set_default_ansi_colors()

  augroup vimrc
    autocmd ColorScheme * call s:set_default_ansi_colors()
  augroup END
endif

augroup autoreload
  set autoread
  autocmd FocusLost,FocusGained,CursorMoved,CursorMovedI,CursorHold,CursorHoldI  * silent! checktime
augroup END

augroup filetypes
  autocmd BufRead,BufNewFile Dockerfile* setfiletype dockerfile
  autocmd BufRead,BufNewFile *php_cs*    setfiletype php
  autocmd BufRead,BufNewFile *zshrc      setfiletype zsh
  autocmd BufRead,BufNewFile *zsh        setfiletype zsh
  autocmd BufRead,BufNewFile *.mjs       setfiletype javascript
  autocmd BufRead,BufNewFile *.csv       setfiletype csv
  autocmd BufRead,BufNewFile .env*       setfiletype sh
  autocmd BufWritePre        * :%s/\s\+$//ge
  autocmd BufWritePre        * :%s/\r//ge
augroup END

set expandtab                   " タブをスペースにする
set tabstop=2
set shiftwidth=2
set conceallevel=2
set concealcursor=nc
augroup indentsize
  autocmd FileType sh         setlocal shiftwidth=2 tabstop=2
  autocmd FileType vue        setlocal shiftwidth=2 tabstop=2
  autocmd FileType blade      setlocal shiftwidth=2 tabstop=2
  autocmd FileType yaml       setlocal shiftwidth=2 tabstop=2
  autocmd FileType javascript setlocal shiftwidth=2 tabstop=2
  autocmd FileType typescript setlocal shiftwidth=2 tabstop=2
  autocmd FileType json       setlocal shiftwidth=2 tabstop=2
  autocmd FileType html       setlocal shiftwidth=2 tabstop=2
  autocmd FileType go         setlocal shiftwidth=4 tabstop=4 noexpandtab
  autocmd FileType vim        setlocal shiftwidth=2 tabstop=2
  autocmd FileType python     setlocal shiftwidth=4 tabstop=4
  autocmd FileType c          setlocal shiftwidth=4 tabstop=4
  autocmd FileType make       setlocal shiftwidth=4 tabstop=4 noexpandtab
  autocmd FileType markdown   setlocal shiftwidth=2 tabstop=2 conceallevel=0
  autocmd FileType gitconfig  setlocal noexpandtab
augroup END


if IsWSL()
  augroup Yank
    au!
    autocmd TextYankPost * :call system('win32yank.exe -i', @")
  augroup END
  noremap <silent> p :call setreg('"',system('win32yank.exe -o'))<CR>""p
endif

let s:vim_plug_root = '~/.cache/vim/plugged'
let s:vim_plug_plugins = '~/.cache/vim/plugins'
set rtp+=~/.cache/vim/plugged/vim-plug
set rtp+=~/.cache/vim/plugins

if !isdirectory(expand(s:vim_plug_plugins))
  call system('mkdir -p ' . s:vim_plug_plugins)
endif

if !isdirectory(expand(s:vim_plug_root))
  echo 'install vim-plug...'
  call system('mkdir -p ' . s:vim_plug_root . 'vim-plug')
  call system('git clone https://github.com/junegunn/vim-plug.git ' . s:vim_plug_root . '/vim-plug/autoload')
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin(s:vim_plug_plugins)
    Plug 'preservim/nerdtree'
      nmap <silent><Leader>n :NERDTreeToggle<CR>
      nmap <silent><Leader>h :NERDTreeFind<CR>
      let g:NERDTreeWinSize = 35
      let g:NERDTreeLimitedSyntax = 1
      let g:NERDTreeQuitOnOpen = 0
      let g:NERDTreeNodeDelimiter = "\u00a0"
      augroup nerdtree_hook_add
          autocmd FileType nerdtree nmap <buffer> l o
          autocmd FileType nerdtree nmap <buffer> <C-0> o
          autocmd FileType nerdtree nmap <buffer> <C-n> j
          autocmd FileType nerdtree nmap <buffer> <C-p> k
      augroup END

   Plug 'kaicataldo/material.vim'
      let g:material_terminal_italics = 0
      let g:material_theme_style = 'palenight'

    Plug 'terryma/vim-multiple-cursors'

    Plug 'deris/vim-shot-f'

    Plug 'machakann/vim-highlightedyank'

    Plug 'simeji/winresizer'
      let g:winresizer_vert_resize = 1
      let g:winresizer_horiz_resize = 1

call plug#end()

" ファイルタイププラグインおよびインデントを有効化
syntax off
try
  colorscheme material
catch
endtry

hi! MatchParen guibg=#555555 guifg=NONE gui=bold
hi! Visual guibg=#888888 guifg=NONE
hi! SpecialKey ctermfg=239 ctermbg=NONE
hi! clear LineNr
hi! clear SignColumn

hi! Normal guibg=NONE ctermbg=NONE

hi! Terminal       guibg=#323232 guifg=#fffeeb gui=NONE      ctermfg=235  ctermbg=230  cterm=NONE
hi! CursorLine     guibg=NONE    guifg=NONE    gui=underline ctermbg=NONE ctermfg=NONE cterm=underline
hi! CursorIM       guibg=#af00af guifg=#000000 gui=NONE      ctermbg=127  ctermfg=16   cterm=NONE
hi! HighlightedyankRegion cterm=reverse gui=reverse

autocmd FileType * call <SID>def_base_syntax() " autocmd Syntax may be better

function! s:def_base_syntax()
  " Simple example
  autocmd FileType python syntax match commonOperator "\(+\|=\|-\|\^\|\*\)"
  autocmd FileType python syntax match baseDelimiter "\(,\|\.\)"
  autocmd FileType python hi link commonOperator Operator
  autocmd FileType python hi link baseDelimiter Special
endfunction

augroup syntaxFromStart
    autocmd FileType vue :syntax sync fromstart
augroup END

if has('multi_byte_ime')
  highlight Cursor guifg=NONE guibg=Green
  highlight CursorIM guifg=NONE guibg=Purple
endif

filetype plugin indent on
